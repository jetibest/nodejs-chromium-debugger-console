#!/usr/bin/env node

const http = require('http');
const readline = require('readline');
const WebSocket = require('ws');

const debuggerUrl = 'http://127.0.0.1:9222';

function get_debugger(path)
{
	return new Promise(function(resolve, reject)
	{
		var req = http.request(debuggerUrl + path, function(res)
		{
			var data = '';
			res.on('data', function(chunk)
			{
				data += chunk;
			});
			res.on('end', function()
			{
				resolve(JSON.parse(data));
			});
		});
		req.on('error', reject);
		req.end();
	});
}

var ws;
var ws_id = 0;
const ws_callbacks = {};
function request_debugger(fn, args)
{
	var obj = {
		resolve: function(){},
		reject: function(){},
		promise: null
	};
	ws_callbacks[++ws_id] = obj;
	return obj.promise = new Promise(function(resolve, reject)
	{
		obj.resolve = resolve;
		obj.reject = reject;
		
		ws.send(JSON.stringify({
			id: ws_id,
			method: fn,
			params: args
		}));
	});
}

var targetUrl = process.argv.slice(2)[0] || '';
var targetStartsWith = false;
if(targetUrl.endsWith('*'))
{
	targetUrl = targetUrl.substring(0, targetUrl.length - 1);
	targetStartsWith = true;
}

(async () => {
	
	var wsUrl = '';
	
	var targets = await get_debugger('/json').catch(console.error);
	if(targets && targets.length)
	{
		for(var i=0;i<targets.length;++i)
		{
			var target = targets[i];
			if(targetStartsWith)
			{
				if(target.url.startsWith(targetUrl))
				{
					wsUrl = target.webSocketDebuggerUrl;
					break;
				}
			}
			else if(target.url === targetUrl)
			{
				wsUrl = target.webSocketDebuggerUrl;
				break;
			}
		}
	}
	
	if(!wsUrl)
	{
		console.error('First run chromium with: --remote-debugging-port=9222');
		console.error('Usage: ' + process.argv[0] + ' ' + process.argv[1] + ' <target-url>');
		return console.log('error: Target not found.');
	}
	

	ws = new WebSocket(wsUrl, {perMessageDeflate: false});
	ws.on('message', function(msg)
	{
		var result = JSON.parse(msg.toString('utf8'));
		if('error' in result)
		{
			ws_callbacks[result.id].reject(result);
		}
		else
		{
			ws_callbacks[result.id].resolve(result);
		}
		delete ws_callbacks[result.id];
	});
	await new Promise(function(resolve){ ws.on('open', resolve); });
	
	readline.createInterface({
		input: process.stdin,
		output: process.stdout,
		terminal: false
	}).on('line', async function(ln)
	{
		if(ln === '.exit' || ln === 'exit' || ln === 'q' || ln === 'quit')
		{
			this.close();
			ws.close();
			return;
		}
		
		var result = await request_debugger('Runtime.evaluate', {
			expression: ln,
			includeCommandLineAPI: true,
			silent: true,
			generatePreview: false,
			userGesture: false,
			awaitPromise: false,
			throwOnSideEffect: false
		}).catch(err => console.error(err.error));
		console.log(result.result);
		
	}).on('close', function()
	{
		ws.close();
	});
})();
