#!/usr/bin/env node

const http = require('http');
const readline = require('readline');
const WebSocket = require('ws');

const debuggerUrl = 'http://127.0.0.1:9222';

function get_debugger()
{
	return new Promise(function(resolve, reject)
	{
		var req = http.request(debuggerUrl + '/json/version', function(res)
		{
			var data = '';
			res.on('data', function(chunk)
			{
				data += chunk;
			});
			res.on('end', function()
			{
				resolve(JSON.parse(data));
			});
		});
		req.on('error', reject);
		req.end();
	});
}

var targetUrl = process.argv.slice(2)[0] || '';
var targetStartsWith = false;
if(targetUrl.endsWith('*'))
{
	targetUrl = targetUrl.substring(0, targetUrl.length - 1);
	targetStartsWith = true;
}

(async () => {
	
	var wsUrl = '';
    var targetId = '';
	
	var dbg = await get_debugger().catch(console.error);
	if(dbg)
	{
        if(dbg.webSocketDebuggerUrl)
        {
            wsUrl = dbg.webSocketDebuggerUrl;
        }
        else if(Array.isArray(dbg))
        {
            for(var i=0;i<dbg.length;++i)
            {
                var t = dbg[i];
                
                if(targetStartsWith)
                {
                    if(t.url.startsWith(targetUrl))
                    {
                        targetId = t.id;
                        wsUrl = t.webSocketDebuggerUrl;
                    }
                }
                else
                {
                    if(t.url === targetUrl)
                    {
                        targetId = t.id;
                        wsUrl = t.webSocketDebuggerUrl;
                    }
                }
            }
        }
	}
	
	if(!wsUrl)
	{
		console.error('First run chromium with: --remote-debugging-port=9222');
		console.error('Usage: ' + process.argv[0] + ' ' + process.argv[1] + ' <target-url>');
		return console.log(JSON.stringify({error: 'Target not found.'}));
	}
	
	var stdio = readline.createInterface({
		input: process.stdin,
		output: process.stdout,
		terminal: false
	}).on('line', async function(ln)
	{
		if(ln === '.exit' || ln === 'exit' || ln === 'q' || ln === 'quit')
		{
			this.close();
			return;
		}
		
		console.error('Sending: ' + ln);
		
		if(isOpen)
        {
            ws.send(ln);
        }
        else
        {
            openLines.push(ln);
        }
    });
	
    var isOpen = false;
    var openLines = [];
    var ws = new WebSocket(wsUrl);
    ws.onopen = async function()
    {
        console.error('WebSocket opened');
        isOpen = true;
        for(var i=0;i<openLines.length;++i)
        {
            var ln = openLines[i];
            
            ws.send(ln);
        }
    };
    ws.onmessage = function(e)
    {
        console.log(e.data +'');
    };
    ws.onclose = function()
    {
        console.error('WebSocket closed');
        stdio.close();
    };
})();
